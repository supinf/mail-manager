// Code generated by go-swagger; DO NOT EDIT.

package suppression

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/supinf/supinf-mail/app-api/auth"
)

// GetSuppressionsMailHandlerFunc turns a function with the right signature into a get suppressions mail handler
type GetSuppressionsMailHandlerFunc func(GetSuppressionsMailParams, *auth.Session) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSuppressionsMailHandlerFunc) Handle(params GetSuppressionsMailParams, principal *auth.Session) middleware.Responder {
	return fn(params, principal)
}

// GetSuppressionsMailHandler interface for that can handle valid get suppressions mail params
type GetSuppressionsMailHandler interface {
	Handle(GetSuppressionsMailParams, *auth.Session) middleware.Responder
}

// NewGetSuppressionsMail creates a new http.Handler for the get suppressions mail operation
func NewGetSuppressionsMail(ctx *middleware.Context, handler GetSuppressionsMailHandler) *GetSuppressionsMail {
	return &GetSuppressionsMail{Context: ctx, Handler: handler}
}

/*GetSuppressionsMail swagger:route GET /suppressions/{mail} suppression getSuppressionsMail

対象メールアドレスのサプレッションを取得

対象メールアドレスのアカウントレベルサプレッションを取得

*/
type GetSuppressionsMail struct {
	Context *middleware.Context
	Handler GetSuppressionsMailHandler
}

func (o *GetSuppressionsMail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSuppressionsMailParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *auth.Session
	if uprinc != nil {
		principal = uprinc.(*auth.Session) // this is really a auth.Session, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
