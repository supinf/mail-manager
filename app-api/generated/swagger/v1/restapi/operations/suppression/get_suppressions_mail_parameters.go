// Code generated by go-swagger; DO NOT EDIT.

package suppression

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetSuppressionsMailParams creates a new GetSuppressionsMailParams object
// no default values defined in spec.
func NewGetSuppressionsMailParams() GetSuppressionsMailParams {

	return GetSuppressionsMailParams{}
}

// GetSuppressionsMailParams contains all the bound params for the get suppressions mail operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSuppressionsMail
type GetSuppressionsMailParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*対象メールアドレス
	  Required: true
	  In: path
	*/
	Mail strfmt.Email
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetSuppressionsMailParams() beforehand.
func (o *GetSuppressionsMailParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rMail, rhkMail, _ := route.Params.GetOK("mail")
	if err := o.bindMail(rMail, rhkMail, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindMail binds and validates parameter Mail from path.
func (o *GetSuppressionsMailParams) bindMail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: email
	value, err := formats.Parse("email", raw)
	if err != nil {
		return errors.InvalidType("mail", "path", "strfmt.Email", raw)
	}
	o.Mail = *(value.(*strfmt.Email))

	if err := o.validateMail(formats); err != nil {
		return err
	}

	return nil
}

// validateMail carries on validations for parameter Mail
func (o *GetSuppressionsMailParams) validateMail(formats strfmt.Registry) error {

	if err := validate.FormatOf("mail", "path", "email", o.Mail.String(), formats); err != nil {
		return err
	}
	return nil
}
