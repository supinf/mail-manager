// Code generated by go-swagger; DO NOT EDIT.

package history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/supinf/supinf-mail/app-api/auth"
)

// GetMailsHistoriesHandlerFunc turns a function with the right signature into a get mails histories handler
type GetMailsHistoriesHandlerFunc func(GetMailsHistoriesParams, *auth.Session) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMailsHistoriesHandlerFunc) Handle(params GetMailsHistoriesParams, principal *auth.Session) middleware.Responder {
	return fn(params, principal)
}

// GetMailsHistoriesHandler interface for that can handle valid get mails histories params
type GetMailsHistoriesHandler interface {
	Handle(GetMailsHistoriesParams, *auth.Session) middleware.Responder
}

// NewGetMailsHistories creates a new http.Handler for the get mails histories operation
func NewGetMailsHistories(ctx *middleware.Context, handler GetMailsHistoriesHandler) *GetMailsHistories {
	return &GetMailsHistories{Context: ctx, Handler: handler}
}

/*GetMailsHistories swagger:route GET /mails/histories history getMailsHistories

メール送信履歴取得

メールの送信履歴を取得

*/
type GetMailsHistories struct {
	Context *middleware.Context
	Handler GetMailsHistoriesHandler
}

func (o *GetMailsHistories) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMailsHistoriesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *auth.Session
	if uprinc != nil {
		principal = uprinc.(*auth.Session) // this is really a auth.Session, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
