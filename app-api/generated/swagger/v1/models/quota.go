// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Quota quota
//
// swagger:model Quota
type Quota struct {

	// 上限数
	// Required: true
	Limit *int64 `json:"limit"`

	// 開始日（ex. Period=WEEK の時, Offset=0 が Sunday, Offset=1 が Monday）
	Offset int64 `json:"offset,omitempty"`

	// 期間
	// Required: true
	// Enum: [DAY WEEK MONTH]
	Period *string `json:"period"`
}

// Validate validates this quota
func (m *Quota) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Quota) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

var quotaTypePeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DAY","WEEK","MONTH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quotaTypePeriodPropEnum = append(quotaTypePeriodPropEnum, v)
	}
}

const (

	// QuotaPeriodDAY captures enum value "DAY"
	QuotaPeriodDAY string = "DAY"

	// QuotaPeriodWEEK captures enum value "WEEK"
	QuotaPeriodWEEK string = "WEEK"

	// QuotaPeriodMONTH captures enum value "MONTH"
	QuotaPeriodMONTH string = "MONTH"
)

// prop value enum
func (m *Quota) validatePeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, quotaTypePeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Quota) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	// value enum
	if err := m.validatePeriodEnum("period", "body", *m.Period); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Quota) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Quota) UnmarshalBinary(b []byte) error {
	var res Quota
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
