// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MailContentType mail content type
//
// swagger:model MailContentType
type MailContentType struct {

	// MIME タイプ
	// Required: true
	// Enum: [text/plain text/html auto]
	MimeType *string `json:"mimeType"`
}

// Validate validates this mail content type
func (m *MailContentType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMimeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mailContentTypeTypeMimeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text/plain","text/html","auto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mailContentTypeTypeMimeTypePropEnum = append(mailContentTypeTypeMimeTypePropEnum, v)
	}
}

const (

	// MailContentTypeMimeTypeTextPlain captures enum value "text/plain"
	MailContentTypeMimeTypeTextPlain string = "text/plain"

	// MailContentTypeMimeTypeTextHTML captures enum value "text/html"
	MailContentTypeMimeTypeTextHTML string = "text/html"

	// MailContentTypeMimeTypeAuto captures enum value "auto"
	MailContentTypeMimeTypeAuto string = "auto"
)

// prop value enum
func (m *MailContentType) validateMimeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mailContentTypeTypeMimeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MailContentType) validateMimeType(formats strfmt.Registry) error {

	if err := validate.Required("mimeType", "body", m.MimeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMimeTypeEnum("mimeType", "body", *m.MimeType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MailContentType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MailContentType) UnmarshalBinary(b []byte) error {
	var res MailContentType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
